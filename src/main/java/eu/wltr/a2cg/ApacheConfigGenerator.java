package eu.wltr.a2cg;

import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;

import javax.xml.bind.JAXBException;

import org.apache.commons.beanutils.PropertyUtils;

import eu.wltr.a2cg.schema.ConfigUnmarshaller;
import eu.wltr.a2cg.schema.Configuration;
import eu.wltr.a2cg.schema.VirtualHost;

@SuppressWarnings({ "rawtypes", "unchecked" })
public class ApacheConfigGenerator {

	private final ConfigPrinter printer;
	private final Configuration config;
	private final SectionFactory sf;

	public ApacheConfigGenerator(InputStream in, OutputStream out)
			throws JAXBException {
		config = ConfigUnmarshaller.load(in);
		printer = new ConfigPrinter(out);
		sf = new SectionFactory(printer);

	}

	public void generate() {

		printer.writeComment("This is an autogenerated file from a2cg.");
		printer.writeComment("Every modification will be overridden.");
		printer.writeNewline();

		for (VirtualHost host : config.getHost()) {
			printer.writeComment("");
			printer.writeComment(host.getName());
			printer.writeComment("");
			printer.beginScope("VirtualHost", "*:80");

			Map<String, Object> elements = getElements(host);

			for (String key : sf.getKeys()) {
				if(!elements.containsKey(key))
					continue;
				
				Object value = elements.get(key);
				
				if(value == null)
					continue;
				
				ConfigSection section = sf.get(key);
				section.print(value, host);

			}

			printer.endScope("VirtualHost");
			printer.writeNewline();

		}

	}

	private Map getElements(VirtualHost host) {
		try {
			return PropertyUtils.describe(host);

		} catch (IllegalAccessException | InvocationTargetException
				| NoSuchMethodException e) {
			e.printStackTrace();
			throw new AssertionError(e);

		}

	}

}
